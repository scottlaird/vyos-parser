# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T5791:
# - migrate "service dns dynamic address web web-options ..."
#        to "service dns dynamic name <service> address web ..." (per service)
# - migrate "service dns dynamic address <address> rfc2136 <service> ..."
#        to "service dns dynamic name <service> address <interface> protocol 'nsupdate'"
# - migrate "service dns dynamic address <interface> service <service> ..."
#        to "service dns dynamic name <service> address <interface> ..."
# - normalize the all service names to conform with name constraints

import re
from unicodedata import normalize
from vyos.configtree import ConfigTree

def normalize_name(name):
    """Normalize service names to conform with name constraints.

    This is necessary as part of migration because there were no constraints in
    the old name format.
    """
    # Normalize unicode characters to ASCII (NFKD)
    # Replace all separators with hypens, strip leading and trailing hyphens
    name = normalize('NFKD', name).encode('ascii', 'ignore').decode()
    name = re.sub(r'(\s|_|\W)+', '-', name).strip('-')

    return name

base_path = ['service', 'dns', 'dynamic']
address_path = base_path + ['address']
name_path = base_path + ['name']

def migrate(config: ConfigTree) -> None:
    if not config.exists(address_path):
        # Nothing to do
        return

    # config.copy does not recursively create a path, so initialize the name path as tagged node
    if not config.exists(name_path):
        config.set(name_path)
        config.set_tag(name_path)

    for address in config.list_nodes(address_path):

        address_path_tag = address_path + [address]

        # Move web-option as a configuration in each service instead of top level web-option
        if config.exists(address_path_tag + ['web-options']) and address == 'web':
            for svc_type in ['service', 'rfc2136']:
                if config.exists(address_path_tag + [svc_type]):
                    for svc_cfg in config.list_nodes(address_path_tag + [svc_type]):
                        config.copy(address_path_tag + ['web-options'],
                                    address_path_tag + [svc_type, svc_cfg, 'web-options'])
            config.delete(address_path_tag + ['web-options'])

        for svc_type in ['service', 'rfc2136']:
            if config.exists(address_path_tag + [svc_type]):
                # Set protocol to 'nsupdate' for RFC2136 configuration
                if svc_type == 'rfc2136':
                    for rfc_cfg in config.list_nodes(address_path_tag + ['rfc2136']):
                        config.set(address_path_tag + ['rfc2136', rfc_cfg, 'protocol'], 'nsupdate')

                # Add address as config value in each service before moving the service path
                # And then copy the services from 'address <interface> service <service>'
                #                              to 'name (service|rfc2136)-<service>-<address>'
                # Note: The new service is named (service|rfc2136)-<service>-<address>
                #       to avoid name conflict with old entries
                for svc_cfg in config.list_nodes(address_path_tag + [svc_type]):
                    config.set(address_path_tag + [svc_type, svc_cfg, 'address'], address)
                    config.copy(address_path_tag + [svc_type, svc_cfg],
                                name_path + ['-'.join([svc_type, svc_cfg, address])])

    # Finally cleanup the old address path
    config.delete(address_path)

    # Normalize the all service names to conform with name constraints
    index = 1
    for name in config.list_nodes(name_path):
        new_name = normalize_name(name)
        if new_name != name:
            # Append index if there is still a name conflicts after normalization
            # For example, "foo-?(" and "foo-!)" both normalize to "foo-"
            if config.exists(name_path + [new_name]):
                new_name = f'{new_name}-{index}'
                index += 1
            config.rename(name_path + [name], new_name)
