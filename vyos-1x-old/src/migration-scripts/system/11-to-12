# Copyright 2019-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# Unclutter RADIUS configuration
#
# Move radius-server top level tag nodes to a regular node which allows us
# to specify additional general features for the RADIUS client.

from vyos.configtree import ConfigTree

cfg_base = ['system', 'login']

def migrate(config: ConfigTree) -> None:
    if not (config.exists(cfg_base + ['radius-server']) or config.exists(cfg_base + ['radius-source-address'])):
        # Nothing to do
        return

    #
    # Migrate "system login radius-source-address" to "system login radius"
    #
    if config.exists(cfg_base + ['radius-source-address']):
        address = config.return_value(cfg_base + ['radius-source-address'])
        # delete old configuration node
        config.delete(cfg_base + ['radius-source-address'])
        # write new configuration node
        config.set(cfg_base + ['radius', 'source-address'], value=address)

    #
    # Migrate "system login radius-server" tag node to new
    # "system login radius server" tag node and also rename the "secret" node to "key"
    #
    if config.exists(cfg_base + ['radius-server']):
        for server in config.list_nodes(cfg_base + ['radius-server']):
            base_server = cfg_base + ['radius-server', server]
            # "key" node is mandatory
            key = config.return_value(base_server + ['secret'])
            config.set(cfg_base + ['radius', 'server', server, 'key'], value=key)

            # "port" is optional
            if config.exists(base_server + ['port']):
                port = config.return_value(base_server + ['port'])
                config.set(cfg_base + ['radius', 'server', server, 'port'], value=port)

            # "timeout is optional"
            if config.exists(base_server + ['timeout']):
                timeout = config.return_value(base_server + ['timeout'])
                config.set(cfg_base + ['radius', 'server', server, 'timeout'], value=timeout)

            # format as tag node
            config.set_tag(cfg_base + ['radius', 'server'])

            # delete old configuration node
            config.delete(base_server)

        # delete top level tag node
        if config.exists(cfg_base + ['radius-server']):
            config.delete(cfg_base + ['radius-server'])
