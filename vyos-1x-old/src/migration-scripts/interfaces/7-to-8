# Copyright 2020-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# Split WireGuard endpoint into address / port nodes to make use of common
# validators

import os

from vyos.configtree import ConfigTree
from vyos.utils.permission import chown
from vyos.utils.permission import chmod_750

def migrate_default_keys():
    kdir = r'/config/auth/wireguard'
    if os.path.exists(f'{kdir}/private.key') and not os.path.exists(f'{kdir}/default/private.key'):
        location = f'{kdir}/default'
        if not os.path.exists(location):
            os.makedirs(location)

        chown(location, 'root', 'vyattacfg')
        chmod_750(location)
        os.rename(f'{kdir}/private.key', f'{location}/private.key')
        os.rename(f'{kdir}/public.key', f'{location}/public.key')

def migrate(config: ConfigTree) -> None:
    base = ['interfaces', 'wireguard']

    migrate_default_keys()

    if not config.exists(base):
        # Nothing to do
        return

    # list all individual wireguard interface isntance
    for i in config.list_nodes(base):
        iface = base + [i]
        for peer in config.list_nodes(iface + ['peer']):
            base_peer = iface + ['peer', peer]
            if config.exists(base_peer + ['endpoint']):
                endpoint = config.return_value(base_peer + ['endpoint'])
                address = endpoint.split(':')[0]
                port = endpoint.split(':')[1]
                # delete old node
                config.delete(base_peer + ['endpoint'])
                # setup new nodes
                config.set(base_peer + ['address'], value=address)
                config.set(base_peer + ['port'], value=port)
