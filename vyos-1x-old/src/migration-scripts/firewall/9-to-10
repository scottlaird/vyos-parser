# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T5050: Log options
#  cli changes from:
#  set firewall [name | ipv6-name] <name> rule <number> log-level <log_level>
#  To
#  set firewall [name | ipv6-name] <name> rule <number> log-options level <log_level>

from vyos.configtree import ConfigTree

base = ['firewall']

def migrate(config: ConfigTree) -> None:
    if not config.exists(base):
        # Nothing to do
        return

    if config.exists(base + ['name']):
        for name in config.list_nodes(base + ['name']):
            if not config.exists(base + ['name', name, 'rule']):
                continue

            for rule in config.list_nodes(base + ['name', name, 'rule']):
                log_options_base = base + ['name', name, 'rule', rule, 'log-options']
                rule_log_level = base + ['name', name, 'rule', rule, 'log-level']

                if config.exists(rule_log_level):
                    tmp = config.return_value(rule_log_level)
                    config.delete(rule_log_level)
                    config.set(log_options_base + ['level'], value=tmp)

    if config.exists(base + ['ipv6-name']):
        for name in config.list_nodes(base + ['ipv6-name']):
            if not config.exists(base + ['ipv6-name', name, 'rule']):
                continue

            for rule in config.list_nodes(base + ['ipv6-name', name, 'rule']):
                log_options_base = base + ['ipv6-name', name, 'rule', rule, 'log-options']
                rule_log_level = base + ['ipv6-name', name, 'rule', rule, 'log-level']

                if config.exists(rule_log_level):
                    tmp = config.return_value(rule_log_level)
                    config.delete(rule_log_level)
                    config.set(log_options_base + ['level'], value=tmp)
