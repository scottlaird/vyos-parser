# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T5150: Rework CLI definitions to apply route-maps between routing daemons
#        and zebra/kernel

from vyos.configtree import ConfigTree

ospf_base = ['protocols', 'ospf']

def migrate(config: ConfigTree) -> None:
    # Check if OSPF is configured - if so, migrate the CLI node
    if config.exists(ospf_base):
        if config.exists(ospf_base + ['route-map']):
            tmp = config.return_value(ospf_base + ['route-map'])

            config.set(['system', 'ip', 'protocol', 'ospf', 'route-map'], value=tmp)
            config.set_tag(['system', 'ip', 'protocol'])
            config.delete(ospf_base + ['route-map'])

    ospfv3_base = ['protocols', 'ospfv3']
    # Check if OSPFv3 is configured - if so, migrate the CLI node
    if config.exists(ospfv3_base):
        if config.exists(ospfv3_base + ['route-map']):
            tmp = config.return_value(ospfv3_base + ['route-map'])

            config.set(['system', 'ipv6', 'protocol', 'ospfv3', 'route-map'], value=tmp)
            config.set_tag(['system', 'ipv6', 'protocol'])
            config.delete(ospfv3_base + ['route-map'])

    # Check if vrf names are configured. Check if OSPF/OSPFv3 is configured - if so,
    # migrate the CLI node(s)
    if config.exists(['vrf', 'name']):
        for vrf in config.list_nodes(['vrf', 'name']):
            vrf_base = ['vrf', 'name', vrf]
            if config.exists(vrf_base + ['protocols', 'ospf', 'route-map']):
                tmp = config.return_value(vrf_base + ['protocols', 'ospf', 'route-map'])

                config.set(vrf_base + ['ip', 'protocol', 'ospf', 'route-map'], value=tmp)
                config.set_tag(vrf_base + ['ip', 'protocol', 'ospf'])
                config.delete(vrf_base + ['protocols', 'ospf', 'route-map'])

            if config.exists(vrf_base + ['protocols', 'ospfv3', 'route-map']):
                tmp = config.return_value(vrf_base + ['protocols', 'ospfv3', 'route-map'])

                config.set(vrf_base + ['ipv6', 'protocol', 'ospfv3', 'route-map'], value=tmp)
                config.set_tag(vrf_base + ['ipv6', 'protocol', 'ospfv6'])
                config.delete(vrf_base + ['protocols', 'ospfv3', 'route-map'])
