# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T4916: Rewrite IPsec peer authentication and psk migration

from vyos.configtree import ConfigTree

base = ['vpn', 'ipsec']

def migrate(config: ConfigTree) -> None:
    if not config.exists(base):
        # Nothing to do
        return

    # PEER changes
    if config.exists(base + ['site-to-site', 'peer']):
        for peer in config.list_nodes(base + ['site-to-site', 'peer']):
            peer_base = base + ['site-to-site', 'peer', peer]

            # replace: 'ipsec site-to-site peer <tag> authentication pre-shared-secret xxx'
            #       => 'ipsec authentication psk <tag> secret xxx'
            if config.exists(peer_base + ['authentication', 'pre-shared-secret']):
                tmp = config.return_value(peer_base + ['authentication', 'pre-shared-secret'])
                config.delete(peer_base + ['authentication', 'pre-shared-secret'])
                config.set(base + ['authentication', 'psk', peer, 'secret'], value=tmp)
                # format as tag node to avoid loading problems
                config.set_tag(base + ['authentication', 'psk'])

                # Get id's from peers for "ipsec auth psk <tag> id xxx"
                if config.exists(peer_base + ['authentication', 'local-id']):
                    local_id = config.return_value(peer_base + ['authentication', 'local-id'])
                    config.set(base + ['authentication', 'psk', peer, 'id'], value=local_id, replace=False)
                if config.exists(peer_base + ['authentication', 'remote-id']):
                    remote_id = config.return_value(peer_base + ['authentication', 'remote-id'])
                    config.set(base + ['authentication', 'psk', peer, 'id'], value=remote_id, replace=False)

                if config.exists(peer_base + ['local-address']):
                    tmp = config.return_value(peer_base + ['local-address'])
                    config.set(base + ['authentication', 'psk', peer, 'id'], value=tmp, replace=False)
                if config.exists(peer_base + ['remote-address']):
                    tmp = config.return_values(peer_base + ['remote-address'])
                    if tmp:
                        for remote_addr in tmp:
                            if remote_addr == 'any':
                                remote_addr = '%any'
                            config.set(base + ['authentication', 'psk', peer, 'id'], value=remote_addr, replace=False)

                # get DHCP peer interface as psk dhcp-interface
                if config.exists(peer_base + ['dhcp-interface']):
                    tmp = config.return_value(peer_base + ['dhcp-interface'])
                    config.set(base + ['authentication', 'psk', peer, 'dhcp-interface'], value=tmp)
