# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T5729: Switch to valueless whenever is possible.
# From
    # set policy [route | route6] ... rule <rule> log enable
    # set policy [route | route6] ... rule <rule> log disable
# To
    # set policy [route | route6] ... rule <rule> log
    # Remove command if log=disable

from vyos.configtree import ConfigTree

base = ['policy']

def migrate(config: ConfigTree) -> None:
    if not config.exists(base):
        # Nothing to do
        return

    for family in ['route', 'route6']:
        if config.exists(base + [family]):

            for policy_name in config.list_nodes(base + [family]):
                if config.exists(base + [family, policy_name, 'rule']):
                    for rule in config.list_nodes(base + [family, policy_name, 'rule']):
                        # Log
                        if config.exists(base + [family, policy_name, 'rule', rule, 'log']):
                            log_value = config.return_value(base + [family, policy_name, 'rule', rule, 'log'])
                            config.delete(base + [family, policy_name, 'rule', rule, 'log'])
                            if log_value == 'enable':
                                config.set(base + [family, policy_name, 'rule', rule, 'log'])
                        # State
                        if config.exists(base + [family, policy_name, 'rule', rule, 'state']):
                            flag_enable = 'False'
                            for state in ['established', 'invalid', 'new', 'related']:
                                if config.exists(base + [family, policy_name, 'rule', rule, 'state', state]):
                                    state_value = config.return_value(base + [family, policy_name, 'rule', rule, 'state', state])
                                    config.delete(base + [family, policy_name, 'rule', rule, 'state', state])
                                    if state_value == 'enable':
                                        config.set(base + [family, policy_name, 'rule', rule, 'state'], value=state, replace=False)
                                        flag_enable = 'True'
                            if flag_enable == 'False':
                                config.delete(base + [family, policy_name, 'rule', rule, 'state'])
