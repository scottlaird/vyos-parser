# Copyright 2022-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# T6079: Disable duplicate static mappings

from vyos.configtree import ConfigTree

base = ['service', 'dhcp-server']

def migrate(config: ConfigTree) -> None:
    if not config.exists(base + ['shared-network-name']):
        # Nothing to do
        return

    # Run this for every instance if 'shared-network-name'
    for network in config.list_nodes(base + ['shared-network-name']):
        base_network = base + ['shared-network-name', network]

        if not config.exists(base_network + ['subnet']):
            continue

        for subnet in config.list_nodes(base_network + ['subnet']):
            base_subnet = base_network + ['subnet', subnet]

            if config.exists(base_subnet + ['static-mapping']):
                used_mac = []
                used_ip = []

                for mapping in config.list_nodes(base_subnet + ['static-mapping']):
                    base_mapping = base_subnet + ['static-mapping', mapping]

                    if config.exists(base_mapping + ['mac-address']):
                        mac = config.return_value(base_mapping + ['mac-address'])

                        if mac in used_mac:
                            config.set(base_mapping + ['disable'])
                        else:
                            used_mac.append(mac)

                    if config.exists(base_mapping + ['ip-address']):
                        ip = config.return_value(base_mapping + ['ip-address'])

                        if ip in used_ip:
                            config.set(base_subnet + ['static-mapping', mapping, 'disable'])
                        else:
                            used_ip.append(ip)
