# Copyright 2023-2024 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library.  If not, see <http://www.gnu.org/licenses/>.

# syslog: migrate deprecated CLI options
#         - protocols -> local7
#         - security -> auth

from vyos.configtree import ConfigTree

base = ['system', 'syslog']

def rename_facilities(config, base_tree, facility, facility_new) -> None:
    if config.exists(base + [base_tree, 'facility', facility]):
        # do not overwrite already existing replacement facility
        if not config.exists(base + [base_tree, 'facility', facility_new]):
            config.rename(base + [base_tree, 'facility', facility], facility_new)
        else:
            # delete old duplicate facility config
            config.delete(base + [base_tree, 'facility', facility])

def migrate(config: ConfigTree) -> None:
    if not config.exists(base):
        return

    #
    # Rename protocols and securityy facility to common ones
    #
    replace = {
        'protocols' : 'local7',
        'security' : 'auth'
    }
    for facility, facility_new in replace.items():
        rename_facilities(config, 'console', facility, facility_new)
        rename_facilities(config, 'global', facility, facility_new)

        if config.exists(base + ['host']):
            for host in config.list_nodes(base + ['host']):
                rename_facilities(config, f'host {host}', facility, facility_new)

    #
    # It makes no sense to configure udp/tcp transport per individual facility
    #
    if config.exists(base + ['host']):
        for host in config.list_nodes(base + ['host']):
            protocol = None
            for facility in config.list_nodes(base + ['host', host, 'facility']):
                tmp_path = base + ['host', host, 'facility', facility, 'protocol']
                if config.exists(tmp_path):
                    # We can only change the first one
                    if protocol == None:
                        protocol = config.return_value(tmp_path)
                        config.set(base + ['host', host, 'protocol'], value=protocol)
                    config.delete(tmp_path)
